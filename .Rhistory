?sample
sample(1:6,4,replace=T)
sample(1:6,40,replace=T)
sample(1:6,6)
sample(1:6,7)
sample(1:6,6)
sample(1:6,6,replace=T)
sample(1:6,6)
sample(1:6,6,replace=TRUE)
sample(1:6,6,replace=true)
sample(1:6,6,replace=t)
sample(1:6,6,replace=T)
sample(1:6,6)
sample(1:6,6,prob=c(0.5,0.1,0.1,0.1,0.1),replace=T)
sample(1:6,6,prob=c(0.5,0.1,0.1,0.1,0.1,0.1),replace=T)
sample(1:6,6,prob=c(0.5,0.1,0.1,0.1,0.1,0.11),replace=T)
sample(1:6,6,prob=c(0.5,0.1,0.1,0.1,0.1,0.3),replace=T)
sample(1:6,6,prob=c(0.5,0.1,0.1,0.1,0.1,0.1),replace=T)
sample(1:600,6,prob=c(0.5,0.1,0.1,0.1,0.1,0.1),replace=T)
sample(1:600,6,replace=T)
sample(1:6,600,prob=c(0.5,0.1,0.1,0.1,0.1,0.1),replace=T)
hist(sample(1:6,600,prob=c(0.5,0.1,0.1,0.1,0.1,0.1),replace=T))
hist(sample(1:6,600,prob=c(0.5,0.1,0.1,0.1,0.1,0.1),replace=T),col="red")
getavgdieroll <- function(){
x <- sample(1:6,6,replace=TRUE)
avg <- mean(x)
return(x)
}
getavgdieroll()
getavgdieroll <- function(){
x <- sample(1:6,6,replace=TRUE)
avg <- mean(x)
return(avg)
}
getavgdieroll()
v <- sapply(1:10,getavgdieroll)
v <- sapply(1:10,getavgdieroll())
v <- sapply(1:10,getavgdieroll)
gad <- function(){
x <- sample(1:6,6,replace=TRUE)
avg <- mean(x)
return(avg)
}
v <- sapply(1:10,gad)
v <- sapply(1:10,gad())
?sapply(list, function)
?sapply
v <- sapply(1:10,gad(),1)
v <- sapply(1:10,gad,1)
v <- sapply(list(1:10),gad)
sappy(x,gad)
sapply(x,gad)
i39 <- sapply(3:9, seq)
i39 <- sapply(3:9, gad)
x <- sample(1:6,6,replace=TRUE)
avg <- mean(x)
gad <- function(x){
x <- sample(1:6,6,replace=TRUE)
avg <- mean(x)
return(avg)
}
i39 <- sapply(3:9, gad)
v <- sapply(1:10,gad)
v
v <- sapply(1:1000,gad)
hist(v)
v <- sapply(1:10000,gad)
v <- sapply(1:100000,gad)
v <- sapply(1:1000000,gad)
v <- sapply(1:100000,gad)
hist(v)
v <- sapply(1:10000,gad)
hist(v)
v <- sapply(1:100000,gad)
hist(v)
gad <- function(x){
x <- sample(1:6,6,replace=TRUE)
avg <- mean(x)
return(avg)
}
hist(v)
hist(v,breaks=100)
?hist
hist(v,breaks=2)
hist(v,breaks=10)
hist(v,breaks=100)
hist(v)
hist(v,breaks=12)
hist(v,breaks=24)
hist(v,breaks=25)
hist(v,breaks=26)
hist(v,breaks=80)
hist(v,breaks=50)
hist(v,breaks=80)
hist(v,breaks=26)
2476 + 64 + 18
2479 + 64 + 18
2507 + 64 + 11
48/3
16*4.5
1.5*16*4.5
1.5*16*4.5*10*21
1.5*16*4.5*10*21/1.2
1.5*16*4.5*80
1.5*16*4.5
9600/80
125 * 7 - 30*1.2
(125 * 7 - 30*1.2) / 1.2
8*16e9 / 30000000
8*16e9 / 20000000
8*16e9 / 20000000 / 60 / 60
0.08*556
-12/49
(-12/49^2)
3.5*3.5*(-12/49)
(-24/49^2)
(-24/49)^2
(-24/49)
(-24/49)^2
x <- 10*100*(1:100) - 5
x
x <- 10*(1:100)/100 - 5
x
plot(x,cos(x))
plot(x,1/cos(x))
plot(x,arccos(x))
plot(x,acos(x))
plot(x,1/cos(x))
plot(x,1/cos(x),type="l")
x <- 10*(1:10000)/10000 - 5
plot(x,1/cos(x),type="l")
plot(x,acos(x),type="l")
plot(x,1/cos(x),type="l")
plot(x,1/cos(x),type="l",col="red")
plot(x,1/cos(x),type="l",col="red",ylim=(-10,10))
plot(x,1/cos(x),type="l",col="red",ylim=c(-10,10))
lines(x,acos(x),type="l",col="blue",ylim=c(-10,10))
lines(x,cos(x),type="l",col="green",ylim=c(-10,10))
lines(x,acos(x),type="l",col="blue",ylim=c(-10,10))
knitr::opts_chunk$set(echo = TRUE)
#devtools::install_github("dgrtwo/stackr")
set.seed(1234)
version <-1.0
versionstring <- sprintf("Version %.1f",version)
starttime <- Sys.time()
startfmttime <- sprintf(format(starttime, "%d %b %Y - %H:%M:%S"))
print(sprintf("%s created on %s",versionstring,startfmttime))
fetchdata <- T
library(stackr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(scales)
library(tidyr)
tztz <- "UCT"
firstday <- as.POSIXct("2015-01-05",tz=tztz) # Start on a Monday - will be reset later
today <- as.POSIXct(Sys.Date(),tz=tztz)
userid <- 7565    # Robert S.
userid <- 2372064 # MrFlick
userid <- 3458744 # Mike Wise
adfname <- sprintf("adf0-%d.csv",userid)
qdfname <- sprintf("qdf0-%d.csv",userid)
rdfname <- sprintf("rdf0-%d.csv",userid)
#fetchdata <- T
if (fetchdata){
adf0 <- stack_users(userid, "answers", num_pages = 100, pagesize = 100)
write.csv(adf0,adfname,quote=F,row.names = F)
qdf0 <- stack_users(userid, "questions", num_pages = 100, pagesize = 100)
write.csv(qdf0,qdfname,quote=T,row.names = F)
rdf0 <- stack_users(userid, "reputation-history", num_pages = 100, pagesize = 100)
write.csv(rdf0,rdfname,quote=F,row.names = F)
}
adf1 <- read.csv(adfname)
qdf1 <- read.csv(qdfname)
rdf1 <- read.csv(rdfname)
adf1$creation_date <- as.POSIXct(adf1$creation_date,tz=tztz)
qdf1$creation_date <- as.POSIXct(qdf1$creation_date,tz=tztz)
rdf1$creation_date <- as.POSIXct(rdf1$creation_date,tz=tztz)
adf  <- adf1 %>% mutate(date=creation_date) %>%
mutate(day=day(date)) %>%
mutate(wday=wday(date)) %>%
mutate(month=month(date)) %>%
mutate(year=year(date)) %>%
mutate( dnum = round(as.numeric(difftime(date,firstday,"days")))) %>%
mutate(wnum=trunc(dnum/7)) %>%
arrange(date)
qdf  <- qdf1 %>% mutate(date=creation_date) %>%
mutate(day=day(date)) %>%
mutate(wday=wday(date)) %>%
mutate(month=month(date)) %>%
mutate(year=year(date)) %>%
mutate( dnum = round(as.numeric(difftime(date,firstday,"days")))) %>%
mutate(wnum=trunc(dnum/7)) %>%
arrange(date)
rdf  <- rdf1 %>% mutate(date=creation_date) %>%
mutate(day=day(date)) %>%
mutate(wday=wday(date)) %>%
mutate(month=month(date)) %>%
mutate(year=year(date)) %>%
mutate( dnum = round(as.numeric(difftime(date,firstday,"days")))) %>%
mutate(wnum=trunc(dnum/7)) %>%
arrange(date)
rdf <- rdf %>% mutate(rep=cumsum(reputation_change))
print(sprintf("Total Quest:%7d",nrow(qdf)))
print(sprintf("Total Answ:%7d",nrow(adf)))
print(sprintf("Latest Rep:%7d",rdf$rep[nrow(rdf)]))
madf <- adf %>% group_by(year,month) %>% summarize(dnum=max(dnum),count=n()) %>% arrange(dnum)
print(data.frame(madf))
mrdf <- rdf %>% group_by(year,month) %>% summarize(dnum=max(dnum),rep=max(rep)) %>% arrange(dnum)
print(data.frame(mrdf))
library(scales)
addVlines <- function(vlines,gp){
if (is.null(vlines)) return(gp) # do nothing in this case
ldf <- data.frame(dt=vlines)
ldf$ndt <- as.numeric(ldf$dt)
gp <- gp + geom_vline(xintercept=ldf$ndt,color="red")
return(gp)
}
addBackground <- function(backg,gp){
if (is.null(backg)) return(gp) # do nothing in this case
gp <- gp + theme(panel.background = element_rect(fill = backg))
return(gp)
}
doplot <- function(ddf,x,y,mtit="",xlab="",ylab=NULL,vlines=NULL,backg=NULL,series=NULL,sdate=NULL,edate=NULL){
# Single series plot  with monthly breaks on the x-axis
if (is.null(sdate)){
sdate <- firstday
}
if (is.null(edate)){
edate <- today
}
gp <- ggplot(ddf,aes_string(x=x,y=y))  +
xlab(xlab) + ylab(ylab) + ggtitle(mtit) +
scale_x_datetime(breaks = date_breaks("1 months"),limits=c(sdate,edate)) +
theme(axis.text.x=element_text(angle=-45, vjust=0.5))
gp <- addVlines(vlines,gp)
gp <- gp +geom_line(aes_string(color=series),na.rm=T)
gp <- addBackground(backg,gp)
return(gp)
}
sdate <- firstday
edate <- today
doplot(rdf,"date","rep",vlines=adf$date,ylab="rep-points",backg="lightsteelblue1",sdate=sdate,edate=edate)
wadf <- adf %>% group_by(wnum) %>% summarize(count=n()) %>% arrange(wnum)
wadf <- wadf %>%  expand(wnum=full_seq(wnum,1)) %>% left_join(.,wadf)
wadf[is.na(wadf)] <- 0
wadf$date <- as.POSIXct(firstday) + wadf$wnum*7*24*3600
print(data.frame(wadf[wadf$count>0,]))
print(sprintf("Average weekly answers:%.1f  median:%.1f  sum:%.1f",mean(wadf$count),median(wadf$count),sum(wadf$count)))
wqdf <- qdf %>% group_by(wnum) %>% summarize(count=n()) %>% arrange(wnum)
wqdf <- wqdf %>%  expand(wnum=full_seq(wnum,1)) %>% left_join(.,wqdf)
wqdf[is.na(wqdf)] <- 0
wqdf$date <- as.POSIXct(firstday) + wqdf$wnum*7*24*3600
print(data.frame(wqdf[wqdf$count>0,]))
print(sprintf("Average weekly question:%.1f  median:%.1f  sum:%.1f",mean(wqdf$count),median(wqdf$count),sum(wqdf$count)))
regdf <- rdf %>% group_by(dnum) %>%
summarize(yy=max(year),mm=max(month),dd=max(day),rep=max(rep))
alldays <- data.frame(dnum=1:max(regdf$dnum),zero=0)
regdf <- full_join(alldays,regdf,by="dnum")
print(sprintf("Before there are %d missing days",sum(is.na(regdf$rep))))
prevval <- 0
for (i in 1:nrow(regdf)){
if (is.na(regdf$rep[i])){
regdf$rep[i] <- prevval
} else {
prevval <- regdf$rep[i]
}
print(sprintf("After there are %d missing days",sum(is.na(regdf$rep))))
repv <- regdf$rep
n <- length(repv)
prevdayrep <- c(0,repv[2:n-1])
regdf$drep <- regdf$rep-prevdayrep
qusdf <- qdf %>% group_by(dnum) %>% summarize(dqus=n())
ansdf <- adf %>% group_by(dnum) %>% summarize(dans=n())
pstdf <-  full_join(qusdf,ansdf,by="dnum")
pstdf[is.na(pstdf)] <- 0
fregdf <- full_join(regdf,pstdf,by="dnum")
fregdf[is.na(fregdf)] <- 0
fregdf$tans <- cumsum(fregdf$dans)
fregdf$tqus <- cumsum(fregdf$dqus)
fregdf <- fregdf[,c("dnum","yy","mm","dd","rep","drep","tans","dans","tqus","dqus")]
fregdf$dansl1 <- lag(fregdf$dans)
fregdf$dansl2 <- lag(fregdf$dansl1)
fregdf$dansl3 <- lag(fregdf$dansl2)
fregdf$dansl4 <- lag(fregdf$dansl3)
fregdf <- fregdf[complete.cases(fregdf),]
fit <- glm(drep ~ tans + dans + dqus,data=fregdf)
summary(fit)
esttimetotarget <- function(trep,curposted,crep,autorepdaycoef,reppstcoef,pstpw){
autorppday <- autorepdaycoef*curposted
autoreppwk <- autorppday*7
repneed <- trep-crep
rppqpday <- pstpw*reppstcoef/7
days <- repneed/(rppqpday+autorppday)
date <- Sys.Date() + days
datep <- as.POSIXct(Sys.Date()) + 24*3600*days
datec <- format(datep, "%d %b %Y %H:%M")
msg <- sprintf("Qpw:%4.1f Autoreppwk:%.1f currep:%.0f Need:%.0f  days:%6.1f date:%s",pstpw,autoreppwk,crep,repneed,days,datec)
return(msg)
}
cans <- max(fregdf$tans)
cval <- sum(fregdf$drep)*0.9936
cval <- 12129                           # currep val
tacoef <- fit$coefficients["tans"]
qcoef <- fit$coefficients["dans"]
print(sprintf("acoeff :%.1f",qcoef))
print(sprintf("anws-rep per answ coef:%.1f",qcoef))
print(sprintf("auto-rep per week coef:%.5f  posts:%d  sum:%.1f",tacoef,cans,cans*tacoef*7))
print("-- 15k ---")
print(esttimetotarget(15000,cans,cval,tacoef,qcoef,0))
print(esttimetotarget(15000,cans,cval,tacoef,qcoef,1))
print(esttimetotarget(15000,cans,cval,tacoef,qcoef,2))
print(esttimetotarget(15000,cans,cval,tacoef,qcoef,4))
print(esttimetotarget(15000,cans,cval,tacoef,qcoef,8))
print(esttimetotarget(15000,cans,cval,tacoef,qcoef,16))
print("-- 20k ---")
print(esttimetotarget(20000,cans,cval,tacoef,qcoef,0))
print(esttimetotarget(20000,cans,cval,tacoef,qcoef,1))
print(esttimetotarget(20000,cans,cval,tacoef,qcoef,2))
print(esttimetotarget(20000,cans,cval,tacoef,qcoef,4))
print(esttimetotarget(20000,cans,cval,tacoef,qcoef,8))
print(esttimetotarget(20000,cans,cval,tacoef,qcoef,16))
sdate <- firstday
edate <- today
fregdf$rephat <- predict(fit,data=fregdf)
fregdf$date <- firstday + (fregdf$dnum-0.9)*24*3600
lregdf <- fregdf[,c("date","rep","tans","dans","dansl1","dansl2","dansl3")]
drephat <- predict(fit,lregdf)
.0972*24*30
.0972*24*31
x0 <- 198.67
z0 <- 100.8
x18 <- 240.17
z18 <- 114.47
dx <- (x18-x0)/18
dz <- (z18-z0)/18
dx
dz
dz <- (z18-z0)/17
dx <- (x18-x0)/17
dx
dz
dx <- (x18-x0)/16.8
dz <- (z18-z0)/16.8
dx
dz
dz <- (z18-z0)/16.5
dx <- (x18-x0)/16.5
dx
dz
f1 <- function(x){
+
}
source('~/.active-rstudio-document')
f1(2)
f1(1)
f1(1.0001)-f1(1)
dx <- 0.0001
(f1(1+dx)-f(1))/dx
(f1(1+dx)-f1(1))/dx
dx <- 0.000-1
(f1(1+dx)-f1(1))/dx
dx <- 0.00001
(f1(1+dx)-f1(1))/dx
(f1(2+dx)-f1(2))/dx
(f1(1000+dx)-f1(1000))/dx
dx <- 1e-10
(f1(1+dx)-f1(1))/dx
source('~/21-AI FY19/SmartParking/b43coord.R')
cdf
source('~/21-AI FY19/SmartParking/b43coord.R')
cdf
source('~/21-AI FY19/SmartParking/b43coord.R')
cdf
scatter.smooth((x=cdf$lat,y=cdf$x)
scatter.smooth(x=cdf$lat,y=cdf$x)
scatter.smooth(x=cdf$long,y=cdf$x)
cdf
scatter.smooth(x=cdf$lng,y=cdf$x)
lm(lat~x + y)
lm(cdf,lat~x + y)
lm(lat~x + y,data=cdf)
lm(long~x + y,data=cdf)
lm(long~x ,data=cdf)
lm(lng~x ,data=cdf)
lm(lng~x = y ,data=cdf)
lm(lng~x + y ,data=cdf)
m <- lm(lng~x + y ,data=cdf)
m
class(m)
source('~/21-AI FY19/SmartParking/b43coord.R')
predict(xmod,ndf)
predict(ymod,ndf)
source('~/21-AI FY19/SmartParking/b43coord.R')
avgxerr
avgyerr
source('~/21-AI FY19/SmartParking/b43coord.R')
avgyerr
source('~/21-AI FY19/SmartParking/b43coord.R')
avgzerr
source('~/21-AI FY19/SmartParking/b43coord.R')
avgzerr
source('~/21-AI FY19/SmartParking/b43coord.R')
avgxerr
avgzerr
avgxerr/mean(nx)
avgzerr/mean(nz)
avgxerr/mean(abs(nx))
avgzerr/mean(abs(nz))
source('~/21-AI FY19/SmartParking/b43coord.R')
xerr
zerr
max(nx)-min(nx)
source('~/21-AI FY19/SmartParking/b43coord.R')
xerr/xrng
xerr/zrng
zerr/zrng
source('~/21-AI FY19/SmartParking/b43coord.R')
zerr
zerr/zrng
xerr/xrng
mean(xerr/xrng)
mean(zerr/xrng)
mean(zerr/zrng)
source('~/21-AI FY19/SmartParking/b43coord.R')
setwd("D:/transfer/syslog")
source('D:/transfer/syslog/phil-surfacebook.R')
?read.csv
source('D:/transfer/syslog/phil-surfacebook.R')
ldf
colnames(ldf)
source('D:/transfer/syslog/phil-surfacebook.R')
names(ldf)
source('D:/transfer/syslog/phil-surfacebook.R')
names(ldf)
source('D:/transfer/syslog/phil-surfacebook.R')
names(ldf)
source('D:/transfer/syslog/phil-surfacebook.R')
names(ldf)
class(ldf)
class(ldf$row.names)
sapply(ldf,class)
head(ldf$Date.and.Time)
source('D:/transfer/syslog/phil-surfacebook.R')
head(ldf)
source('D:/transfer/syslog/phil-surfacebook.R')
head(ldf)
source('D:/transfer/syslog/phil-surfacebook.R')
head(ldf)
ncols(ldf)
ncol(ldf)
gctorture(F)
ncol(ldf)
ldf$dt <- dmy_hms(ldf$DateTime)
ldf$dt <- dmy(ldf$DateTime)
source('D:/transfer/syslog/phil-surfacebook.R')
head(ldf)
sdate <- ldf$dt[1]
edate <- ldf$dt[nrow(ldf)]
head(ldf)
source('D:/transfer/syslog/phil-surfacebook.R')
print(doplot(ldf,"dt","dt",vlines=ldf$dt,ylab="rep-points",backg="lightsteelblue1",sdate=sdate,edate=edate))
source('D:/transfer/syslog/phil-surfacebook.R')
sdate
edate
source('D:/transfer/syslog/phil-surfacebook.R')
?grepl
sum(grepl("Unexpected",ldf$Desc)
)
sum(grepl("Unexpected",ldf$Desc))
sum(grepl("expected",ldf$Desc))
sum(grepl("unexpected",ldf$Desc))
sum(grepl("unexpected shutdown",ldf$Desc))
ldf$Desc[grepl("unexpected",ldf$Desc)]
ldf$Desc[grepl("rebooted without cleanly shutting down first",ldf$Desc)]
ldf$dt[grepl("rebooted without cleanly shutting down first",ldf$Desc)]
source('D:/transfer/syslog/phil-surfacebook.R')
?facet_grid
source('D:/transfer/syslog/phil-surfacebook.R')
sdate
edate
source('D:/transfer/syslog/phil-surfacebook.R')
xtab(ldf$wday,ldf$week)
crosstab(ldf$wday,ldf$week)
crosstabs(ldf$wday,ldf$week)
library(misc)
xtab
??xtab
??xtabx
??xtabs
??xtab
table(ldf$wday,ldf$week)
table(ldf$week, ldf$wday)
lrdf <- ldf[ldf$color=="red"]
table(lrdf$week, lrdf$wday)
lrdf <- ldf[ldf$vlinecolor=="red"]
head(ldf)
lrdf <- ldf[ldf$vlinecolor=="red"]
ldf$vlinecolor=="red"
lrdf <- ldf[ldf$vlinecolor=="red",]
table(lrdf$week, lrdf$wday)
source('D:/transfer/syslog/phil-surfacebook.R')
vlinecolor
source('D:/transfer/syslog/phil-surfacebook.R')
ldf
head(ldf)
source('D:/transfer/syslog/phil-surfacebook.R')
dates
txtdate
source('D:/transfer/syslog/phil-surfacebook.R')
ddf
source('D:/transfer/syslog/phil-surfacebook.R')
